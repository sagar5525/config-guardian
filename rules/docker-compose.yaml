# rules/docker-compose.yaml
rules:
  - id: "DOCKER-001"
    name: "Privileged Container"
    description: "Container runs in privileged mode, granting full host access."
    type: "key"
    key: "services.*.privileged"
    value: "true"
    severity: "High"
    remediation: "Remove privileged: true. Use specific capabilities if needed."
    reference: "https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"

  - id: "DOCKER-002"
    name: "Host Network Mode"
    description: "Container uses host network, breaking network isolation."
    type: "key"
    key: "services.*.network_mode"
    value: "host"
    severity: "Medium"
    remediation: "Avoid network_mode: host. Use user-defined bridge networks."
    reference: "https://docs.docker.com/network/host/"

  - id: "DOCKER-003"
    name: "Secrets in Environment Variables"
    description: "Sensitive data (e.g., API keys) exposed in environment."
    type: "key"
    key: "services.*.environment"
    condition: "exists"
    severity: "High"
    remediation: "Use Docker secrets or external vaults. Avoid plaintext env vars."
    reference: "https://docs.docker.com/compose/environment/"

  - id: "DOCKER-004"
    name: "Root User in Container"
    description: "Container runs as root (default), increasing attack surface."
    type: "key"
    key: "services.*.user"
    condition: "not(exists)"
    severity: "Medium"
    remediation: "Set user: '1001' or a non-root UID in docker-compose.yml."
    reference: "https://docs.docker.com/engine/security/userns-remap/"

  - id: "DOCKER-005"
    name: "Volume Mounted as Read-Write"
    description: "Host volume mounted without read-only flag, allowing container modification."
    type: "key"
    key: "services.*.volumes"
    regex: ":.*rw"
    severity: "Medium"
    remediation: "Use ro (read-only) unless write access is required: .//app:ro"
    reference: "https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation"

  - id: "DOCKER-006"
    name: "PID Namespace Shared"
    description: "Container shares host PID namespace, allowing process inspection."
    type: "key"
    key: "services.*.pid"
    value: "host"
    severity: "High"
    remediation: "Remove pid: host. Isolate process space."
    reference: "https://docs.docker.com/engine/reference/run/#pid-settings---pid"

  - id: "DOCKER-007"
    name: "Docker Socket Mounted"
    description: "Docker socket (/var/run/docker.sock) mounted, enabling container breakout."
    type: "key"
    key: "services.*.volumes"
    regex: "/var/run/docker\\.sock"
    severity: "Critical"
    remediation: "Never mount /var/run/docker.sock in production containers."
    reference: "https://raesene.github.io/blog/2016/03/01/Docker-For-Sec-Proles-Part-Two/"

  - id: "DOCKER-008"
    name: "CapAdd: SYS_ADMIN"
    description: "Container granted SYS_ADMIN capability, enabling kernel-level access."
    type: "key"
    key: "services.*.cap_add"
    regex: "SYS_ADMIN"
    severity: "Critical"
    remediation: "Avoid cap_add: SYS_ADMIN. Use minimal capabilities."
    reference: "https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"

  - id: "DOCKER-009"
    name: "Restart Policy: Always"
    description: "Restart: always may hide crashes or enable DoS loops."
    type: "key"
    key: "services.*.restart"
    value: "always"
    severity: "Low"
    remediation: "Use 'unless-stopped' or monitor with health checks."
    reference: "https://docs.docker.com/compose/compose-file/compose-file-v3/#restart"

  - id: "DOCKER-010"
    name: "No Resource Limits"
    description: "No CPU or memory limits set, risking DoS or resource exhaustion."
    type: "key"
    key: "services.*.mem_limit"
    condition: "not(exists)"
    severity: "Medium"
    remediation: "Set mem_limit and cpus: '0.5' to limit resource usage."
    reference: "https://docs.docker.com/config/containers/resource_constraints/"
